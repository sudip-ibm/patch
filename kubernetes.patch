diff --git a/staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver.go b/staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver.go
index f0f2b7140b4..fc922be6ac3 100644
--- a/staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver.go
+++ b/staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver.go
@@ -148,9 +148,8 @@ type APIAggregator struct {
 	// is the versions for the group.
 	handledGroupVersions map[string]sets.Set[string]
 
-	// lister is used to add group handling for /apis/<group> aggregator lookups based on
-	// controller state
-	lister listers.APIServiceLister
+	// handledGroups are the groups that already have routes
+	handledGroups sets.String
 
 	// Information needed to determine routing for the aggregator
 	serviceResolver ServiceResolver
@@ -236,7 +235,7 @@ func (c completedConfig) NewWithDelegate(delegationTarget genericapiserver.Deleg
 		delegateHandler:            delegationTarget.UnprotectedHandler(),
 		proxyTransportDial:         proxyTransportDial,
 		proxyHandlers:              map[string]*proxyHandler{},
-		handledGroupVersions:       map[string]sets.Set[string]{},
+		handledGroups:              sets.String{},
 		lister:                     informerFactory.Apiregistration().V1().APIServices().Lister(),
 		APIRegistrationInformers:   informerFactory,
 		serviceResolver:            c.ExtraConfig.ServiceResolver,
@@ -525,9 +524,7 @@ func (s *APIAggregator) AddAPIService(apiService *v1.APIService) error {
 	}
 
 	// if we've already registered the path with the handler, we don't want to do it again.
-	versions, exist := s.handledGroupVersions[apiService.Spec.Group]
-	if exist {
-		versions.Insert(apiService.Spec.Version)
+	if s.handledGroups.Has(apiService.Spec.Group) {
 		return nil
 	}
 
@@ -542,7 +539,7 @@ func (s *APIAggregator) AddAPIService(apiService *v1.APIService) error {
 	// aggregation is protected
 	s.GenericAPIServer.Handler.NonGoRestfulMux.Handle(groupPath, groupDiscoveryHandler)
 	s.GenericAPIServer.Handler.NonGoRestfulMux.UnlistedHandle(groupPath+"/", groupDiscoveryHandler)
-	s.handledGroupVersions[apiService.Spec.Group] = sets.New[string](apiService.Spec.Version)
+	s.handledGroups.Insert(apiService.Spec.Group)
 	return nil
 }
 
@@ -571,18 +568,8 @@ func (s *APIAggregator) RemoveAPIService(apiServiceName string) {
 	}
 	delete(s.proxyHandlers, apiServiceName)
 
-	versions, exist := s.handledGroupVersions[version.Group]
-	if !exist {
-		return
-	}
-	versions.Delete(version.Version)
-	if versions.Len() > 0 {
-		return
-	}
-	delete(s.handledGroupVersions, version.Group)
-	groupPath := "/apis/" + version.Group
-	s.GenericAPIServer.Handler.NonGoRestfulMux.Unregister(groupPath)
-	s.GenericAPIServer.Handler.NonGoRestfulMux.Unregister(groupPath + "/")
+	// TODO unregister group level discovery when there are no more versions for the group
+	// We don't need this right away because the handler properly delegates when no versions are present
 }
 
 // DefaultAPIResourceConfigSource returns default configuration for an APIResource.
diff --git a/test/e2e/apimachinery/aggregator.go b/test/e2e/apimachinery/aggregator.go
index b7f12162dc6..e498c9cd6fb 100644
--- a/test/e2e/apimachinery/aggregator.go
+++ b/test/e2e/apimachinery/aggregator.go
@@ -52,7 +52,6 @@ import (
 	admissionapi "k8s.io/pod-security-admission/api"
 	samplev1alpha1 "k8s.io/sample-apiserver/pkg/apis/wardle/v1alpha1"
 	"k8s.io/utils/pointer"
-	"k8s.io/utils/strings/slices"
 
 	"github.com/onsi/ginkgo/v2"
 	"github.com/onsi/gomega"
@@ -737,23 +736,6 @@ func TestSampleAPIServer(ctx context.Context, f *framework.Framework, aggrclient
 	framework.ExpectNoError(err, "failed to count the required APIServices")
 	framework.Logf("APIService %s has been deleted.", apiServiceName)
 
-	ginkgo.By("Confirm that the group path of " + apiServiceName + " was removed from root paths")
-	groupPath := "/apis/" + apiServiceGroupName
-	err = wait.PollUntilContextTimeout(ctx, apiServiceRetryPeriod, apiServiceRetryTimeout, true, func(ctx context.Context) (done bool, err error) {
-		rootPaths := metav1.RootPaths{}
-		statusContent, err = restClient.Get().
-			AbsPath("/").
-			SetHeader("Accept", "application/json").DoRaw(ctx)
-		if err != nil {
-			return false, err
-		}
-		err = json.Unmarshal(statusContent, &rootPaths)
-		if err != nil {
-			return false, err
-		}
-		return !slices.Contains(rootPaths.Paths, groupPath), nil
-	})
-	framework.ExpectNoError(err, "Expected to not find %s from root paths", groupPath)
 
 	cleanupSampleAPIServer(ctx, client, aggrclient, n, apiServiceName)
 }
